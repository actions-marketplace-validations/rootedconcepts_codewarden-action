name: Code Warden Release Tagging

on:
  release:
    types:
      - created

jobs:
  tag-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Latest Release
        id: get-latest-release
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const releases = response.data.filter(release => !release.draft && !release.prerelease);
            const latestReleaseTag = releases[0]?.tag_name || "0.0.0";
            return latestReleaseTag
          
  

      - name: Get Latest Release Tag Version
        id: get-latest-release-tag
        run: |
          latestTag=${{ steps.get-latest-release.outputs.result }}
          if [[ $latestTag =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
            latestMajorVersion="${major}"
            latestReleasedVersion="${major}.${minor}.${patch}"
            latestReleasedTagVersionWithBuild="${latestTag}"
          fi
       
          echo "latestReleasedTagVersionWithBuild=${latestReleasedTagVersionWithBuild}"
          echo "latestReleasedTagMajorVersion=${latestMajorVersion}"
          echo "latestReleasedVersion=${latestReleasedVersion}"
          
          echo "latestReleasedTagVersionWithBuild=$latestReleasedTagVersionWithBuild" >> $GITHUB_OUTPUT
          echo "latestReleasedTagMajorVersion=$latestMajorVersion" >> $GITHUB_OUTPUT
          echo "latestReleasedVersion=$latestReleasedVersion" >> $GITHUB_OUTPUT

      - name: Create release tags
        id: create-release-tag
        run: |
            git config --global user.email "${{ github.actor }}@users.noreply.github.com"
            git config --global user.name "${{ github.actor }}"

            if git show-ref --tags --verify -- "refs/tags/v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }}"  >/dev/null 2>&1; then
               echo "Tag 'v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }}' already exists. Deleting the existing tag to recreate"
               git tag -d "v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }}"
               git push --delete origin "v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }}"
            fi

            if git show-ref --tags --verify -- "refs/tags/v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }}" >/dev/null 2>&1; then
              echo "Tag 'v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }}' already exists. Deleting the existing tag to recreate"
              git tag -d "v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }}"
              git push --delete origin "v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }}"
            fi

            echo "Creating tag v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }} from ${{ steps.get-latest-release-tag.outputs.latestReleasedTagVersionWithBuild }}"
            git tag v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }} ${{ steps.get-latest-release-tag.outputs.latestReleasedTagVersionWithBuild }}
            git push origin v${{ steps.get-latest-release-tag.outputs.latestReleasedTagMajorVersion }}

            echo "Creating tag v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }} from ${{ steps.get-latest-release-tag.outputs.latestReleasedTagVersionWithBuild }}"
            git tag v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }} ${{ steps.get-latest-release-tag.outputs.latestReleasedTagVersionWithBuild }}
            git push origin v${{ steps.get-latest-release-tag.outputs.latestReleasedVersion }}

